# yaml-language-server: $schema=https://raw.githubusercontent.com/buildkite/pipeline-schema/main/schema.json

env:
  DOCKER_COMPOSE_VERSION: "1.25.5"
  DOCKER_REGISTRY: "docker.elastic.co"
  DOCKER_IMAGE: "${DOCKER_REGISTRY}/observability-ci/fleet-server" # needs to rename for rollback
  DOCKER_IMAGE_SHA_TAG: "git-${BUILDKITE_COMMIT:0:12}" # needs to rename for rollback, should be "git-${BUILDKITE_COMMIT:0:12}"
  DOCKER_IMAGE_LATEST_TAG: "latest" # needs to rename for rollback
  DOCKER_IMAGE_GIT_TAG: "${BUILDKITE_BRANCH}" # needs to rename for rollback
  GO_AGENT_IMAGE: "golang:${GO_VERSION}"
  TERRAFORM_VERSION: "1.6.4"
<<<<<<< HEAD
=======
  IMAGE_UBUNTU_X86_64: "family/core-ubuntu-2204"
  IMAGE_UBUNTU_ARM_64: "core-ubuntu-2204-aarch64"
  IMAGE_UBUNTU_X86_64_FIPS: "platform-ingest-fleet-server-ubuntu-2204-fips"

# This section is used to define the plugins that will be used in the pipeline.
# See https://buildkite.com/docs/pipelines/integrations/plugins/using#using-yaml-anchors-with-plugins
common:
  - test_collector_plugin: &test_collector_plugin
      test-collector#v1.11.0:
        files: "build/test-*.xml"
        format: "junit"
        branches: "main"
        debug: true
  - bk_analytics_token_plugin: &bk_analytics_token_plugin
      elastic/vault-secrets#v0.1.0:
        path: "kv/ci-shared/platform-ingest/buildkite_analytics_token"
        field: "token"
        env_var: "BUILDKITE_ANALYTICS_TOKEN"
  - docker_elastic_login_plugin: &docker_elastic_login_plugin
      elastic/vault-docker-login#v0.6.0:
        secret_path: 'kv/ci-shared/platform-ingest/elastic_docker_registry'
  # See https://github.com/elastic/oblt-infra/blob/main/conf/resources/repos/fleet-server/01-gcp-buildkite-oidc.tf
  # This plugin authenticates to Google Cloud using the OIDC token.
  - oidc_plugin: &oidc_plugin
      elastic/oblt-google-auth#v1.2.0:
        lifetime: 10800 # seconds
        project-id: "elastic-observability-ci"
        project-number: "911195782929"
>>>>>>> 7da3f69 (fix: package fleet-server using golang-crossbuild  (#5392))

steps:
  - group: "Check and build"
    key: "check"
    steps:
      - label: ":white_check_mark: Run check-ci"
        key: check-ci
        command: "make check-ci"
        agents:
          image: "${GO_AGENT_IMAGE}"
          cpu: "8"
          memory: "4G"

<<<<<<< HEAD
      - label: ":building_construction: Run local build"
        key: make-local
        command: "make local"
        agents:
          image: "${GO_AGENT_IMAGE}"
          cpu: "8"
          memory: "4G"
=======
      - label: "Package x86_64"
        key: "package-x86-64-pr"
        env:
          PLATFORMS: "linux/amd64,darwin/amd64,windows/amd64"
        command: ".buildkite/scripts/release_test.sh"
        artifact_paths:
          - build/distributions/**
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        plugins:
          - *oidc_plugin
>>>>>>> 7da3f69 (fix: package fleet-server using golang-crossbuild  (#5392))

      - label: "Package x86_64 FIPS"
        key: "package-fips-x86-64-pr"
        env:
          FIPS: "true"
          PLATFORMS: "linux/amd64"
        command: ".buildkite/scripts/release_test.sh"
        artifact_paths:
          - build/distributions/**
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        plugins:
          - *oidc_plugin

      - label: "Package aarch64"
        key: "package-arm64-pr"
        env:
          PLATFORMS: "linux/arm64,darwin/arm64"
        command: ".buildkite/scripts/release_test.sh"
        artifact_paths:
          - build/distributions/**
        agents:
          provider: "aws"
          imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
          instanceType: "t4g.2xlarge"
        plugins:
          - *oidc_plugin

      - label: "Package aarch64 FIPS"
        key: "package-fips-arm64-pr"
        env:
          FIPS: "true"
          PLATFORMS: "linux/arm64"
        command: ".buildkite/scripts/release_test.sh"
        artifact_paths:
          - build/distributions/**
        agents:
          provider: "aws"
          imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
          instanceType: "t4g.2xlarge"
        plugins:
          - *oidc_plugin

  - group: "Performance test"
    key: "performance-test"
    steps:
      - label: "Run go benchmark for PR branch"
        key: "go-benchmark-pr"
        command: ".buildkite/scripts/run_benchmark.sh pr"
        artifact_paths:
          - build/next.out
          - build/next.stat
        agents:
          provider: "gcp"
          machineType: "c2-standard-8"

      - label: "Run go benchmark for ${BUILDKITE_PULL_REQUEST_BASE_BRANCH}"
        key: "go-benchmark-base"
        command: ".buildkite/scripts/run_benchmark.sh base"
        artifact_paths:
          - build/base.out
          - build/base.stat
        agents:
          provider: "gcp"
          machineType: "c2-standard-8"

      - label: "Compare results"
        key: "go-benchmark-compare"
        command: ".buildkite/scripts/run_benchmark.sh compare"
        artifact_paths:
          - build/failed_summary.md
          - build/failed_report.json
          - build/full_report.json
        depends_on:
          - go-benchmark-pr
          - go-benchmark-base
        agents:
          provider: "gcp"

    depends_on: "check"

  - group: "Run tests"
    key: "tests"
    steps:
      - label: ":smartbear-testexecute: Run unit tests"
        key: unit-test
        command: ".buildkite/scripts/unit_test.sh"
        agents:
          provider: "gcp"
        artifact_paths:
          - build/*.xml
          - build/coverage*.out

      - label: ":smartbear-testexecute: Run unit tests: MacOS 13"
        key: unit-test-macos-13
        command: ".buildkite/scripts/unit_test.sh"
        agents:
          provider: orka
          imagePrefix: generic-13-ventura-arm
        artifact_paths:
          - build/*.xml
          - build/coverage*.out

      - label: ":smartbear-testexecute: Run integration tests"
        key: int-test
        command: ".buildkite/scripts/integration_test.sh"
        agents:
          provider: "gcp"
        artifact_paths:
          - build/*.xml
        retry:
          automatic:
            limit: 1

      - label: "E2E Test"
        key: "e2e-test"
        command: ".buildkite/scripts/e2e_test.sh"
        env:
          TESTCONTAINERS_RYUK_CONTAINER_PRIVILEGED: "true"
        agents:
          provider: "gcp"
        artifact_paths:
          - build/*.xml
          - build/e2e-coverage.out

      - label: ":junit: Junit annotate"
        plugins:
          - junit-annotate#v2.4.1:
              artifacts: "build/*.xml"
        agents:
          provider: "gcp"
        depends_on:
          - step: "unit-test"
            allow_failure: true
          - step: "unit-test-macos-13"
            allow_failure: true
          - step: "int-test"
            allow_failure: true
          - step: "e2e-test"
            allow_failure: true

      - label: ":sonarqube: Continuous Code Inspection"
        env:
          VAULT_SONAR_TOKEN_PATH: "kv/ci-shared/platform-ingest/elastic/fleet-server/sonar-analyze-token"
        agents:
          image: "docker.elastic.co/cloud-ci/sonarqube/buildkite-scanner:latest"
        command:
          - "buildkite-agent artifact download build/*coverage*.out ."
          - "buildkite-agent artifact download build/test-unit*.out.xml ."
          - "/scan-source-code.sh"
        depends_on:
          - step: "unit-test"
            allow_failure: false
          - step: "e2e-test"
            allow_failure: false
          - step: "unit-test-macos-13"
            allow_failure: false

      - label: ":gcloud: Cloud e2e Test"
        key: "cloud-e2e-test"
        command: ".buildkite/scripts/cloud_e2e_test.sh"
        agents:
          provider: "gcp"
        depends_on:
          - step: "unit-test"
            allow_failure: false
          - step: "int-test"
            allow_failure: false
          - step: "e2e-test"
            allow_failure: false
    depends_on: "check"

  - label: ":docker: Publish docker image"
    key: "publish"
    command: ".buildkite/scripts/build_push_docker_image.sh"
    if: "build.env('BUILDKITE_PULL_REQUEST') == 'false' && build.env('BUILDKITE_BRANCH') == 'main'"
    agents:
      provider: "gcp"
    depends_on:
      - step: "tests"
        allow_failure: false

  - label: ":serverless::argo: Run synthetics tests and update fleet to ${BUILDKITE_COMMIT:0:12} in serverless-gitops"
    async: true
    branches: main
    trigger: gpctl-promote-after-serverless-devenv-synthetics
    build:
      env:
        SERVICE_COMMIT_HASH: ${BUILDKITE_COMMIT:0:12}
        SERVICE: fleet
    depends_on:
      - step: "publish"

  - label: ":jenkins: Release - Package Registry Distribution"
    key: "release-package-registry"
    trigger: "package-registry-release-package-registry-distribution"
    async: true
    build:
      branch: "main"
      meta_data:
        DOCKER_TAG: "${BUILDKITE_TAG}"
    if: "build.env('BUILDKITE_TAG') != ''"

  - trigger: "fleet-server-package-mbp"
    label: ":esbuild: Downstream - Package"
    key: "downstream-package"
    async: true
    if: "build.env('BUILDKITE_PULL_REQUEST') == 'false' && build.env('BUILDKITE_TAG') == '' && build.env('BUILDKITE_BRANCH') != ''"
    build:
      branch: "${BUILDKITE_BRANCH}"
    depends_on:
      - step: "release-test"
        allow_failure: false
