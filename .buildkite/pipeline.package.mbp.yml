# yaml-language-server: $schema=https://raw.githubusercontent.com/buildkite/pipeline-schema/main/schema.json
name: "fleet server package mbp"
env:
  REPO: 'fleet-server'
  SETUP_GVM_VERSION: 'v0.3.0'
  DOCKER_REGISTRY: "docker.elastic.co"
  IMAGE_UBUNTU_X86_64: "family/core-ubuntu-2004"
  IMAGE_UBUNTU_ARM_64: "core-ubuntu-2004-aarch64"

# This section is used to define the plugins that will be used in the pipeline.
# See https://buildkite.com/docs/pipelines/integrations/plugins/using#using-yaml-anchors-with-plugins
common:
  - oidc_plugin: &oidc
      # See https://github.com/elastic/oblt-infra/blob/main/conf/resources/repos/fleet-server/01-gcp-buildkite-oidc.tf
      # This plugin authenticates to Google Cloud using the OIDC token.
      elastic/oblt-google-auth#v1.2.0:
        lifetime: 10800 # seconds
        project-id: "elastic-observability-ci"
        project-number: "911195782929"

steps:
<<<<<<< HEAD
  - group: "Package and Publish"
    key: "package-publish"
    steps:
    - label: "Package Ubuntu-20 x86_64"
      key: "package-x86-64"
      command: ".buildkite/scripts/package.sh {{matrix.type}}"
      agents:
        provider: "gcp"
        image: "${IMAGE_UBUNTU_X86_64}"
        machineType: "c2-standard-16"
      matrix:
        setup:
          type:
          - "snapshot"
          - "staging"

    - label: "Package Ubuntu-20 aarch64"
      key: "package-arm"
      command: ".buildkite/scripts/package.sh {{matrix.type}}"
      agents:
        provider: "aws"
        imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
        instanceType: "t4g.2xlarge"
      matrix:
        setup:
          type:
          - "snapshot"
          - "staging"
=======
  - label: "Package x86_64 snapshot"
    # skip building + packaging snapshot for pre-releases (flagged by a non-empty VERSION_QUALIFIER env var/BK param)
    # as prereleases are only intended to be used with staging; details in https://github.com/elastic/ingest-dev/issues/4855
    if: "build.env('VERSION_QUALIFIER') == null"
    key: "package-x86-64-snapshot"
    command: ".buildkite/scripts/package.sh snapshot"
    agents:
      provider: "gcp"
      image: "${IMAGE_UBUNTU_X86_64}"
      machineType: "c2-standard-16"
    plugins:
      - *oidc_plugin

  - label: "Package x86_64 staging"
    key: "package-x86-64-staging"
    command: |
      source .buildkite/scripts/version_qualifier.sh
      .buildkite/scripts/package.sh staging
    agents:
      provider: "gcp"
      image: "${IMAGE_UBUNTU_X86_64}"
      machineType: "c2-standard-16"
    plugins:
      - *oidc_plugin

  - label: "Package FIPS x86_64 snapshot"
    if: "build.env('VERSION_QUALIFIER') == null"
    key: "package-fips-x86-64-snapshot"
    command: ".buildkite/scripts/package.sh snapshot"
    env:
      FIPS: "true"
    agents:
      provider: "gcp"
      image: "${IMAGE_UBUNTU_X86_64}"
      machineType: "c2-standard-16"
    plugins:
      - *oidc_plugin

  - label: "Package FIPS x86_64 staging"
    key: "package-fips-x86-64-staging"
    command: |
      source .buildkite/scripts/version_qualifier.sh
      .buildkite/scripts/package.sh staging
    env:
      FIPS: "true"
    agents:
      provider: "gcp"
      image: "${IMAGE_UBUNTU_X86_64}"
      machineType: "c2-standard-16"
    plugins:
      - *oidc_plugin

  - label: "Package aarch64 snapshot"
    if: "build.env('VERSION_QUALIFIER') == null"
    key: "package-arm-snapshot"
    command: ".buildkite/scripts/package.sh snapshot"
    agents:
      provider: "aws"
      imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
      instanceType: "t4g.2xlarge"
    plugins:
      - *oidc_plugin

  - label: "Package aarch64 staging"
    key: "package-arm-staging"
    command: |
      source .buildkite/scripts/version_qualifier.sh
      .buildkite/scripts/package.sh staging
    agents:
      provider: "aws"
      imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
      instanceType: "t4g.2xlarge"
    plugins:
      - *oidc_plugin

  - label: "Package FIPS aarch64 snapshot"
    if: "build.env('VERSION_QUALIFIER') == null"
    key: "package-fips-arm-snapshot"
    command: ".buildkite/scripts/package.sh snapshot"
    env:
      FIPS: "true"
    agents:
      provider: "aws"
      imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
      instanceType: "t4g.2xlarge"
    plugins:
      - *oidc_plugin

  - label: "Package FIPS aarch64 staging"
    key: "package-fips-arm-staging"
    command: |
      source .buildkite/scripts/version_qualifier.sh
      .buildkite/scripts/package.sh staging
    env:
      FIPS: "true"
    agents:
      provider: "aws"
      imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
      instanceType: "t4g.2xlarge"
    plugins:
      - *oidc_plugin
>>>>>>> d4d19b2 (bk: use GCP OIDC (#4895))

  - label: "DRA snapshot"
    key: "dra-snapshot"
    command: ".buildkite/scripts/dra_release.sh snapshot"
    agents:
      provider: "gcp"
      image: "${IMAGE_UBUNTU_X86_64}"
      machineType: "c2-standard-16"
<<<<<<< HEAD
    if: "${FILE_EXISTS_IN_REPO}"
=======
    plugins:
      - *oidc_plugin
>>>>>>> d4d19b2 (bk: use GCP OIDC (#4895))
    depends_on:
      - step: "package-publish"
        allow_failure: false

  - label: "DRA release staging"
    key: "dra-staging"
    command: ".buildkite/scripts/dra_release.sh staging"
    agents:
      provider: "gcp"
      image: "${IMAGE_UBUNTU_X86_64}"
      machineType: "c2-standard-16"
<<<<<<< HEAD
    if: "${FILE_EXISTS_IN_REPO} == true && build.env('BUILDKITE_BRANCH') != 'main'"
=======
    plugins:
      - *oidc_plugin
>>>>>>> d4d19b2 (bk: use GCP OIDC (#4895))
    depends_on:
      - step: "dra-snapshot"
        allow_failure: false
