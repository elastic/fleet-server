{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {

    "action": {
      "title": "Agent action",
      "description": "An Elastic Agent action",
      "type": "object",
      "properties": {
        "_id": {
          "description": "The unique identifier for action document",
          "type": "string"
        },
        "_seq_no": {
          "description": "The action sequence number",
          "type": "integer"
        },
        "action_id": {
          "description": "The unique identifier for the Elastic Agent action. There could be multiple documents with the same action_id if the action is split into two separate documents.",
          "type": "string",
          "format": "uuid"
        },
        "@timestamp": {
          "description": "Date/time the action was created",
          "type": "string",
          "format": "date-time"
        },
        "expiration": {
          "description": "The action expiration date/time",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The action type. INPUT_ACTION is the value for the actions that suppose to be routed to the endpoints/beats.",
          "type": "string"
        },
        "input_type": {
          "description": "The input type the actions should be routed to.",
          "type": "string"
        },
        "user_id": {
          "description": "The ID of the user who created the action.",
          "type": "string"
        },
        "agents": {
          "description": "The Agent IDs the action is intended for. No support for json.RawMessage with the current generator. Could be useful to lazy parse the agent ids",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data": {
          "description": "The opaque payload.",
          "type": "object",
          "format": "raw"
        }
      },
      "required": [
        "id"
      ]
    },

    "action-result": {
      "title": "Agent action results",
      "description": "An Elastic Agent action results",
      "type": "object",
      "properties": {
        "@timestamp": {
          "description": "Date/time the action was created",
          "type": "string",
          "format": "date-time"
        },
        "agent_id": {
          "description": "The agent id.",
          "type": "string"
        },
        "action_id": {
          "description": "The action id.",
          "type": "string"
        },
        "started_at": {
          "description": "Date/time the action was started",
          "type": "string",
          "format": "date-time"
        },
        "completed_at": {
          "description": "Date/time the action was completed",
          "type": "string",
          "format": "date-time"
        },
        "action_data": {
          "description": "The opaque payload.",
          "type": "object",
          "format": "raw"
        },
        "error": {
          "description": "The action error message.",
          "type": "string"
        },
        "data": {
          "description": "The opaque payload.",
          "type": "object",
          "format": "raw"
        }
      },
      "required": [
        "id",
        "agent",
        "action"
      ]
    },

    "agent-metadata": {
      "title": "Agent Metadata",
      "description": "An Elastic Agent metadata",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique identifier for the Elastic Agent",
          "type": "string",
          "format": "uuid"
        },
        "version": {
          "description": "The version of the Elastic Agent",
          "type": "string"
        }
      },
      "required": [
        "id",
        "version"
      ]
    },

    "artifact": {
      "title": "Artifact",
      "description": "An artifact served by Fleet",
      "type": "object",
      "properties": {
        "identifier": {
          "description": "Human readable artifact identifier",
          "type": "string"
        },
        "compression_algorithm": {
          "description": "Name of compression algorithm applied to artifact",
          "type": "string"
        },
        "encryption_algorithm": {
          "description": "Name of encryption algorithm applied to artifact",
          "type": "string"
        },
        "encoded_sha256": {
          "description": "SHA256 of artifact after encoding has been applied",
          "type": "string"
        },
        "encoded_size": {
          "description": "Size of artifact after encoding has been applied",
          "type": "integer"
        },
        "decoded_sha256": {
          "description": "SHA256 of artifact before encoding has been applied",
          "type": "string"
        },
        "decoded_size": {
          "description": "Size of artifact before encoding has been applied",
          "type": "integer"
        },
        "created": {
          "description": "Timestamp artifact was created",
          "type": "string",
          "format": "date-time"
        },
        "body": {
          "description": "Encoded artifact data",
          "type": "object",
          "format": "raw"
        },
        "package_name": {
          "description": "Name of the package that owns this artifact",
          "type": "string"
        }
      },
      "required": [
        "identifier",
        "compressionAlgorithm",
        "encodedSha256",
        "encodedSize",
        "decodedSha256",
        "decodedSize",
        "created",
        "body"
      ]
    },
  
    "host-metadata": {
      "title": "Host Metadata",
      "description": "The host metadata for the Elastic Agent",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the host",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture for the Elastic Agent",
          "type": "string"
        },
        "name": {
          "description": "The hostname of the Elastic Agent",
          "type": "string"
        },
        "ip": {
          "description": "The IP addresses of the Elastic Agent",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "architecture",
        "name"
      ]
    },
    "server-metadata": {
      "title": "Server Metadata",
      "description": "A Fleet Server metadata",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique identifier for the Fleet Server",
          "type": "string",
          "format": "uuid"
        },
        "version": {
          "description": "The version of the Fleet Server",
          "type": "string"
        }
      },
      "required": [
        "id",
        "version"
      ]
    },
    "server": {
      "title": "Server",
      "description": "A Fleet Server",
      "type": "object",
      "properties": {
        "@timestamp": {
          "description": "Date/time the server was updated",
          "type": "string",
          "format": "date-time"
        },
        "agent": { "$ref": "#/definitions/agent-metadata" },
        "host": { "$ref": "#/definitions/host-metadata" },
        "server": { "$ref":  "#/definitions/server-metadata" }
      },
      "required": [
        "agent",
        "host",
        "server"
      ]
    },
    "policy": {
      "title": "Policy",
      "description": "A policy that an Elastic Agent is attached to",
      "type": "object",
      "properties": {
        "@timestamp": {
          "description": "Date/time the policy revision was created",
          "type": "string",
          "format": "date-time"
        },
        "policy_id": {
          "description": "The ID of the policy",
          "type": "string",
          "format": "uuid"
        },
        "revision_idx": {
          "description": "The revision index of the policy",
          "type": "integer"
        },
        "coordinator_idx": {
          "description": "The coordinator index of the policy",
          "type": "integer"
        },
        "data": {
          "description": "The opaque payload.",
          "type": "object",
          "format": "raw"
        },
        "default_fleet_server": {
          "description": "True when this policy is the default policy to start Fleet Server",
          "type": "boolean"
        }
      },
      "required": [
        "policy_id",
        "revision_idx",
        "coordinator_idx",
        "data",
        "default_fleet_server"
      ]
    },
    "policy-leader": {
      "title": "Policy Leader",
      "description": "The current leader Fleet Server for a policy",
      "type": "object",
      "properties": {
        "@timestamp": {
          "description": "Date/time the leader was taken or held",
          "type": "string",
          "format": "date-time"
        },
        "server": { "$ref":  "#/definitions/server-metadata" }
      },
      "required": [
        "server"
      ]
    },
    "agent": {
      "title": "Agent",
      "description": "An Elastic Agent that has enrolled into Fleet",
      "type": "object",
      "properties": {
        "_id": {
          "description": "The unique identifier for the Elastic Agent",
          "type": "string",
          "format": "uuid"
        },
        "_version": {
          "description": "The version of the document in the index",
          "type": "integer"
        },
        "shared_id": {
          "description": "Shared ID",
          "type": "string"
        },
        "type": {
          "description": "Type",
          "type": "string"
        },
        "active": {
          "description": "Active flag",
          "type": "boolean"
        },
        "enrolled_at": {
          "description": "Date/time the Elastic Agent enrolled",
          "type": "string",
          "format": "date-time"
        },
        "unenrolled_at": {
          "description": "Date/time the Elastic Agent unenrolled",
          "type": "string",
          "format": "date-time"
        },
        "unenrollment_started_at": {
          "description": "Date/time the Elastic Agent unenrolled started",
          "type": "string",
          "format": "date-time"
        },
        "upgraded_at": {
          "description": "Date/time the Elastic Agent was last upgraded",
          "type": "string",
          "format": "date-time"
        },
        "upgrade_started_at": {
          "description": "Date/time the Elastic Agent started the current upgrade",
          "type": "string",
          "format": "date-time"
        },
        "access_api_key_id": {
          "description": "ID of the API key the Elastic Agent must used to contact Fleet Server",
          "type": "string"
        },
        "agent": { "$ref": "#/definitions/agent-metadata" },
        "user_provided_metadata": {
          "description": "User provided metadata information for the Elastic Agent",
          "type": "object",
          "format": "raw"
        },
        "local_metadata": {
          "description": "Local metadata information for the Elastic Agent",
          "type": "object",
          "format": "raw"
        },
        "policy_id": {
          "description": "The policy ID for the Elastic Agent",
          "type": "string",
          "format": "uuid"
        },
        "policy_revision_idx": {
          "description": "The current policy revision_idx for the Elastic Agent",
          "type": "integer"
        },
        "policy_coordinator_idx": {
          "description": "The current policy coordinator for the Elastic Agent",
          "type": "integer"
        },
        "policy_output_permissions_hash": {
          "description": "The policy output permissions hash",
          "type": "string"
        },
        "last_updated": {
          "description": "Date/time the Elastic Agent was last updated",
          "type": "string",
          "format": "date-time"
        },
        "last_checkin": {
          "description": "Date/time the Elastic Agent checked in last time",
          "type": "string",
          "format": "date-time"
        },
        "last_checkin_status": {
          "description": "Lst checkin status",
          "type": "string"
        },
        "default_api_key_id": {
          "description": "ID of the API key the Elastic Agent uses to authenticate with elasticsearch",
          "type": "string"
        },
        "default_api_key": {
          "description": "API key the Elastic Agent uses to authenticate with elasticsearch",
          "type": "string"
        },
        "updated_at": {
          "description": "Date/time the Elastic Agent was last updated",
          "type": "string",
          "format": "date-time"
        },
        "packages": {
          "description": "Packages array",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "action_seq_no": {
          "description": "The last acknowledged action sequence number for the Elastic Agent",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "_id",
        "type",
        "active",
        "enrolled_at",
        "status"
      ]
    },
    "enrollment_api_key": {
      "title": "Enrollment API key",
      "description": "An Elastic Agent enrollment API key",
      "type": "object",
      "properties": {
        "active": {
          "description": "True when the key is active",
          "type": "boolean"
        },
        "api_key_id": {
          "description": "The unique identifier for the enrollment key, currently xid",
          "type": "string"
        },
        "api_key": {
          "description": "Api key",
          "type": "string"
        },
        "name": {
          "description": "Enrollment key name",
          "type": "string"
        },
        "policy_id": {
          "type": "string"
        },
        "expire_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "api_key_id",
        "api_key"
      ]
    }
  },
  "checkin": {
    "title": "Checkin",
    "description": "An Elastic Agent checkin to Fleet",
    "type": "object",
    "properties": {
      "_id": {
        "description": "The unique identifier for the Elastic Agent checkin",
        "type": "string",
        "format": "uuid"
      },
      "@timestamp": {
        "description": "Date/time the checkin was created",
        "type": "string",
        "format": "date-time"
      },
      "agent": { "$ref": "#/definitions/agent-metadata" },
      "host": { "$ref": "#/definitions/host-metadata" },
      "server": { "$ref": "#/definitions/server-metadata" },
      "status": {
        "description": "The current overall status of the Elastic Agent",
        "type": "string",
        "enum": ["enrolling", "healthy", "error", "degraded", "offline", "unenrolling", "upgrading"]
      },
      "message": {
        "description": "The current overall status message of the Elastic Agent",
        "type": "string"
      },
      "policy": {
        "title": "Checkin Policy",
        "description": "The current status of the applied policy",
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID for the policy",
            "type": "string",
            "format": "uuid"
          },
          "revision": {
            "description": "The revision of the policy",
            "type": "integer"
          },
          "inputs": {
            "title": "Checkin Policy Input",
            "description": "The current input status per policy",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "The ID for the input",
                  "type": "string",
                  "format": "uuid"
                },
                "template_id": {
                  "description": "The template ID for the input",
                  "type": "string",
                  "format": "uuid"
                },
                "status": {
                  "description": "The current status of the input",
                  "type": "string",
                  "enum": ["healthy", "error", "degraded"]
                },
                "message": {
                  "description": "The current status message of the intput",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "template_id",
                "status",
                "message"
              ]
            }
          }
        },
        "required": [
          "id",
          "revision",
          "inputs"
        ]
      }
    },
    "required": [
      "_id",
      "agent",
      "status",
      "message",
      "enrolled_at",
      "updated_at"
    ]
  }
}
