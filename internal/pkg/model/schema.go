// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by schema-generate. DO NOT EDIT.

package model

import (
	"encoding/json"
)

// Root
type Root interface{}

// Action An Elastic Agent action
type Action struct {

	// The Agent IDs the action is intended for. No support for json.RawMessage with the current generator. Could be useful to lazy parse the agent ids
	Agents []string `json:"agents,omitempty"`

	// The opaque action payload.
	Data json.RawMessage `json:"data,omitempty"`

	// The action expiration date/time
	Expiration string `json:"expiration,omitempty"`

	// The unique identifier for the Elastic Agent action
	Id string `json:"id"`

	// The input identifier the actions should be routed to.
	InputId string `json:"input_id,omitempty"`

	// Date/time the action was created
	Timestamp string `json:"@timestamp,omitempty"`

	// The action type. APP_ACTION is the value for the actions that suppose to be routed to the endpoints/beats.
	Type string `json:"type,omitempty"`
}

// ActionResult An Elastic Agent action results
type ActionResult struct {

	// The action id.
	ActionId string `json:"action_id,omitempty"`

	// The agent id.
	AgentId string `json:"agent_id,omitempty"`

	// The opaque action result payload.
	Data json.RawMessage `json:"data,omitempty"`

	// The action error message.
	Error string `json:"error,omitempty"`

	// Date/time the action was created
	Timestamp string `json:"@timestamp,omitempty"`
}

// Agent An Elastic Agent that has enrolled into Fleet
type Agent struct {

	// ID of the API key the Elastic Agent must used to contact Fleet Server
	AccessApiKeyId int            `json:"access_api_key_id"`
	Agent          *AgentMetadata `json:"agent,omitempty"`

	// API key the Elastic Agent uses to authenticate with elasticsearch
	DefaultApiKey string `json:"default_api_key,omitempty"`

	// ID of the API key the Elastic Agent uses to authenticate with elasticsearch
	DefaultApiKeyId int `json:"default_api_key_id,omitempty"`

	// Date/time the Elastic Agent enrolled
	EnrolledAt string `json:"enrolled_at"`

	// The unique identifier for the Elastic Agent
	Id string `json:"_id"`

	// Local metadata information for the Elastic Agent
	LocalMetadata json.RawMessage `json:"local_metadata,omitempty"`

	// The policy ID for the Elastic Agent
	PolicyId string `json:"policy_id"`

	// The current policy revision for the Elastic Agent
	PolicyRevision int `json:"policy_revision,omitempty"`

	// Date/time the Elastic Agent unenrolled
	UnenrolledAt string `json:"unenrolled_at,omitempty"`

	// Date/time the Elastic Agent unenrolled started
	UnenrollmentStartedAt string `json:"unenrollment_started_at,omitempty"`

	// Date/time the Elastic Agent was last updated
	UpdatedAt string `json:"updated_at"`

	// Date/time the Elastic Agent started the current upgrade
	UpgradeStartedAt string `json:"upgrade_started_at,omitempty"`

	// Date/time the Elastic Agent was last upgraded
	UpgradedAt string `json:"upgraded_at,omitempty"`

	// The version of the document in the index
	Version int `json:"_version"`
}

// AgentMetadata An Elastic Agent metadata
type AgentMetadata struct {

	// The unique identifier for the Elastic Agent
	Id string `json:"id"`

	// The version of the Elastic Agent
	Version string `json:"version"`
}

// Data The opaque action payload.
type Data struct {
}

// HostMetadata The host metadata for the Elastic Agent
type HostMetadata struct {

	// The architecture for the Elastic Agent
	Architecture string `json:"architecture"`

	// The ID of the host
	Id string `json:"id"`

	// The IP addresses of the Elastic Agent
	Ip []string `json:"ip,omitempty"`

	// The hostname of the Elastic Agent
	Name string `json:"name"`
}

// LocalMetadata Local metadata information for the Elastic Agent
type LocalMetadata struct {
}

// Policy A policy that an Elastic Agent is attached to
type Policy struct {

	// The coordinator index of the policy
	CoordinatorIdx int `json:"coordinator_idx"`

	// The data for the policy
	Data string `json:"data"`

	// True when this policy is the default policy to start Fleet Server
	DefaultFleetServer bool `json:"default_fleet_server"`

	// The unique identifier for the policy revision
	Id string `json:"_id"`

	// The ID of the policy
	PolicyId string `json:"policy_id"`

	// The revision index of the policy
	RevisionIdx int `json:"revision_idx"`

	// Date/time the policy revision was created
	Timestamp string `json:"@timestamp,omitempty"`
}

// PolicyLeader The current leader Fleet Server for a policy
type PolicyLeader struct {

	// The unique identifier for the policy
	Id     string          `json:"_id"`
	Server *ServerMetadata `json:"server"`

	// Date/time the leader was taken or held
	Timestamp string `json:"@timestamp,omitempty"`

	// The version of the document in the index
	Version int `json:"_version"`
}

// Server A Fleet Server
type Server struct {
	Agent *AgentMetadata `json:"agent"`
	Host  *HostMetadata  `json:"host"`

	// The unique identifier for the Fleet Server
	Id     string          `json:"_id"`
	Server *ServerMetadata `json:"server"`

	// The version of the document in the index
	Version int `json:"_version"`
}

// ServerMetadata A Fleet Server metadata
type ServerMetadata struct {

	// The unique identifier for the Fleet Server
	Id string `json:"id"`

	// The version of the Fleet Server
	Version string `json:"version"`
}
