// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by dev-tools/cmd/buildlimits/buildlimits.go - DO NOT EDIT.

package config

import (
	"math"
	"runtime"
	"strings"
	"time"

	"github.com/elastic/elastic-agent/pkg/packer"
	"github.com/elastic/go-ucfg/yaml"
	"github.com/pbnjay/memory"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

const (
	defaultCacheNumCounters = 500000           // 10x times expected count
	defaultCacheMaxCost     = 50 * 1024 * 1024 // 50MiB cache size

	defaultMaxConnections = 0 // no limit
	defaultPolicyThrottle = time.Millisecond * 5

	defaultCheckinInterval = time.Millisecond
	defaultCheckinBurst    = 1000
	defaultCheckinMax      = 0
	defaultCheckinMaxBody  = 1024 * 1024

	defaultArtifactInterval = time.Millisecond * 5
	defaultArtifactBurst    = 25
	defaultArtifactMax      = 50
	defaultArtifactMaxBody  = 0

	defaultEnrollInterval = time.Millisecond * 10
	defaultEnrollBurst    = 100
	defaultEnrollMax      = 50
	defaultEnrollMaxBody  = 1024 * 512

	defaultAckInterval = time.Millisecond * 10
	defaultAckBurst    = 100
	defaultAckMax      = 50
	defaultAckMaxBody  = 1024 * 1024 * 2

	defaultStatusInterval = time.Millisecond * 5
	defaultStatusBurst    = 25
	defaultStatusMax      = 50
	defaultStatusMaxBody  = 0
)

type valueRange struct {
	Min int `config:"min"`
	Max int `config:"max"`
}

type envLimits struct {
	Agents         valueRange           `config:"num_agents"`
	RecommendedRAM int                  `config:"recommended_min_ram"`
	Server         *serverLimitDefaults `config:"server_limits"`
	Cache          *cacheLimits         `config:"cache_limits"`
}

func defaultEnvLimits() *envLimits {
	return &envLimits{
		Agents: valueRange{
			Min: 0,
			Max: int(getMaxInt()),
		},
		Server: defaultserverLimitDefaults(),
		Cache:  defaultCacheLimits(),
	}
}

type cacheLimits struct {
	NumCounters int64 `config:"num_counters"`
	MaxCost     int64 `config:"max_cost"`
}

func defaultCacheLimits() *cacheLimits {
	return &cacheLimits{
		NumCounters: defaultCacheNumCounters,
		MaxCost:     defaultCacheMaxCost,
	}
}

type limit struct {
	Interval time.Duration `config:"interval"`
	Burst    int           `config:"burst"`
	Max      int64         `config:"max"`
	MaxBody  int64         `config:"max_body_byte_size"`
}

type serverLimitDefaults struct {
	PolicyThrottle time.Duration `config:"policy_throttle"`
	MaxConnections int           `config:"max_connections"`

	CheckinLimit  limit `config:"checkin_limit"`
	ArtifactLimit limit `config:"artifact_limit"`
	EnrollLimit   limit `config:"enroll_limit"`
	AckLimit      limit `config:"ack_limit"`
	StatusLimit   limit `config:"status_limit"`
}

func defaultserverLimitDefaults() *serverLimitDefaults {
	return &serverLimitDefaults{
		PolicyThrottle: defaultCacheNumCounters,
		MaxConnections: defaultCacheMaxCost,

		CheckinLimit: limit{
			Interval: defaultCheckinInterval,
			Burst:    defaultCheckinBurst,
			Max:      defaultCheckinMax,
			MaxBody:  defaultCheckinMaxBody,
		},
		ArtifactLimit: limit{
			Interval: defaultArtifactInterval,
			Burst:    defaultArtifactBurst,
			Max:      defaultArtifactMax,
			MaxBody:  defaultArtifactMaxBody,
		},
		EnrollLimit: limit{
			Interval: defaultEnrollInterval,
			Burst:    defaultEnrollBurst,
			Max:      defaultEnrollMax,
			MaxBody:  defaultEnrollMaxBody,
		},
		AckLimit: limit{
			Interval: defaultAckInterval,
			Burst:    defaultAckBurst,
			Max:      defaultAckMax,
			MaxBody:  defaultAckMaxBody,
		},
		StatusLimit: limit{
			Interval: defaultStatusInterval,
			Burst:    defaultStatusBurst,
			Max:      defaultStatusMax,
			MaxBody:  defaultStatusMaxBody,
		},
	}
}

var defaults []*envLimits

func init() {
	// Packed Files
	// internal/pkg/config/defaults/gt10000_limits.yml
	// internal/pkg/config/defaults/gt30000_limits.yml
	// internal/pkg/config/defaults/gt50000_limits.yml
	// internal/pkg/config/defaults/gt5000_limits.yml
	// internal/pkg/config/defaults/gt50_limits.yml
	// internal/pkg/config/defaults/gt7500_limits.yml
	// internal/pkg/config/defaults/lte50_limits.yml
	// internal/pkg/config/defaults/max_limits.yml
	unpacked := packer.MustUnpack("eJzEmF1vqkoXx++fj9HrJ6cwiieepBejCMVmxmiQAW5OGKgoDi/ZorycnO9+MojuFrFCdpN92dKuWbPWb/7/NfPP0y5K339EDntO9v6zG0ebnf/svW+cI0sPz34qCoIg/M124S49/FGE7OmvJxoZqQmUyCaS4JbxmzadpA4ZjjR5liEZZtMd9ClRhosdLBb6Xlosk8Im+ESJyGi4YrYyTh0ibdxQSRc7OET6vpiGeGuBLTNBnlDCLnGPHhE3FhiLNFoxN0J8DcDXQDD2NVXcvivjgA6wwNdC8n6A9HWBZPjmAqPwQqNoxMsoyBNrwDaeui3oYCVQdT3SZCN1sw/xgHS0CRYcMj66ZeyjUuP74v8fOKoROIAdL3EXfuxrU+g7RBJscw4sko00eZ2hV6PkddCmk51nzktPjn18yXt6rU+OgnWGlnxtpfBUFloEC9fYO74m9DWVHT2V70c5LHZQRPJErPKdQt+KjMIdLEeavKxzhOd9yLG/uNbJOLrh+ECV8cEhYsJzqXNLznW1t1SOfaRP0tu4s2bORV2LrQXSDVVZ6pjLUVs8rMPMM1Gd01x0o6pPwoURzo1l+iNN9qvcn/7/CMZBHxhRE0ahA4w5DtAQwySwCI5toy7YK6o2eF4Ln7xzs8vz38MLHKllbjmsVbNRACVczkQUwGwaYV4U5rLP8VyV/4wlc7CK3XAseGrOeIFpVbRrvCMNjcBT2YlWBwAVl33xA2OBNKHs2thfAgbp6wzJs6q5brRK7FAJvAfQ9G2yNp0wGs1PVM2v8Giw7RDNMnobN7/JOahrQfCPbzqUwyp3/+XlMZBSHyDXTSClDkCWKHDBojuQoNpQC5BYnklYRhn//puBLLDeBqR/AySugIS9gOSK2gLk8BbIs5Pw39lEKijIDw+UN0eqeAPQBcCfcZe16iqBI35PHZBudVRIqS+Pbz/zdrlAvrmhEVAgpjaR9jZZbShhR3Mw31K92qvQg0XhjlOLV6eGSckPqG3OazFYldXhfZ2cqMqCd2MsOK/zk/e6Otj6B4e659Q67OnU83bHa3JY9nbp4o54NVjRfrModts/j4dg3EkQu9PXtOZpNGcWGKeUGEdbNfYmELmSFBYRzlkFyzcLKLyzn2lRJZEanC6j6kBFwmNb7jkjrrOvVdDtSZ7RUvl104pEJMO86qQ5Fxxib63B6gEhneLmPZWvaFM+rDdVqit1q+45drLhP6XuqueKn1VvLz1SPSxDCfudVW94R/VyJC+HWHfBt99Pgr6qp7TUX2txHdh7HESk3SEbvRW+xXn1FjXt5rx5i4oWt+q87OS6LH3vInt1yAcyB/tJ3BfX4L5DHpIfm2uvW0frsLRul4zO8jbL7qDQjNvLVFvlbdmQo45o3RkSm4b6EKvQyfu9uyD45U0CYH1d9tCxHAX+pxsL/15PqOVC9gHik2rPCQ7X+nCJR0OJWYNVQoFUnm87F6hxbBP8g+f/1RsD0jWxZdo/X8ubfvJzOuyuZ93jf8j9V95blm3X0U7vLf1zfXl5+vd//wUAAP//3k66aQ==")

	for f, v := range unpacked {
		cfg, err := yaml.NewConfig(v, DefaultOptions...)
		if err != nil {
			panic(errors.Wrap(err, "Cannot read spec from "+f))
		}

		l := defaultEnvLimits()
		if err := cfg.Unpack(&l, DefaultOptions...); err != nil {
			panic(errors.Wrap(err, "Cannot unpack spec from "+f))
		}

		defaults = append(defaults, l)
	}
}

func loadLimits(agentLimit int) *envLimits {
	return loadLimitsForAgents(agentLimit)
}

func loadLimitsForAgents(agentLimit int) *envLimits {
	for _, l := range defaults {
		// get nearest limits for configured agent numbers
		if l.Agents.Min < agentLimit && agentLimit <= l.Agents.Max {
			log.Info().Msgf("Using system limits for %d to %d agents for a configured value of %d agents", l.Agents.Min, l.Agents.Max, agentLimit)
			ramSize := int(memory.TotalMemory() / 1024 / 1024)
			if ramSize < l.RecommendedRAM {
				log.Warn().Msgf("Detected %d MB of system RAM, which is lower than the recommended amount (%d MB) for the configured agent limit", ramSize, l.RecommendedRAM)
			}
			return l
		}
	}
	log.Info().Msgf("No applicable limit for %d agents, using default.", agentLimit)
	return defaultEnvLimits()
}

func getMaxInt() int64 {
	if strings.HasSuffix(runtime.GOARCH, "64") {
		return math.MaxInt64
	}
	return math.MaxInt32
}
