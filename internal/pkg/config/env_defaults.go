// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by dev-tools/cmd/buildlimits/buildlimits.go - DO NOT EDIT.

package config

import (
	"time"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
	"github.com/elastic/go-ucfg/yaml"
	"github.com/pbnjay/memory"
	"github.com/pkg/errors"
)

const (
	defaultCacheNumCounters = 500000           // 10x times expected count
	defaultCacheMaxCost     = 50 * 1024 * 1024 // 50MiB cache size

	defaultMaxConnections = 0 // no limit
	defaultPolicyThrottle = time.Millisecond * 5

	defaultCheckinInterval = time.Millisecond
	defaultCheckinBurst    = 1000
	defaultCheckinMax      = 0
	defaultCheckinMaxBody  = 1024 * 1024

	defaultArtifactInterval = time.Millisecond * 5
	defaultArtifactBurst    = 25
	defaultArtifactMax      = 50
	defaultArtifactMaxBody  = 0

	defaultEnrollInterval = time.Millisecond * 10
	defaultEnrollBurst    = 100
	defaultEnrollMax      = 50
	defaultEnrollMaxBody  = 1024 * 512

	defaultAckInterval = time.Millisecond * 10
	defaultAckBurst    = 100
	defaultAckMax      = 50
	defaultAckMaxBody  = 1024 * 1024 * 2
)

type envLimits struct {
	MinRAM int                  `config:"min_ram"`
	MaxRAM int                  `config:"max_ram"`
	Server *serverLimitDefaults `config:"server_limits"`
	Cache  *cacheLimits         `config:"cache_limits"`
}

func defaultEnvLimits() *envLimits {
	return &envLimits{
		MinRAM: 0,
		MaxRAM: 17179869184,
		Server: defaultserverLimitDefaults(),
		Cache:  defaultCacheLimits(),
	}
}

type cacheLimits struct {
	NumCounters int64 `config:"num_counters"`
	MaxCost     int64 `config:"max_cost"`
}

func defaultCacheLimits() *cacheLimits {
	return &cacheLimits{
		NumCounters: defaultCacheNumCounters,
		MaxCost:     defaultCacheMaxCost,
	}
}

type limit struct {
	Interval time.Duration `config:"interval"`
	Burst    int           `config:"burst"`
	Max      int64         `config:"max"`
	MaxBody  int64         `config:"max_body_byte_size"`
}

type serverLimitDefaults struct {
	PolicyThrottle time.Duration `config:"policy_throttle"`
	MaxConnections int           `config:"max_connections"`

	CheckinLimit  limit `config:"checkin_limit"`
	ArtifactLimit limit `config:"artifact_limit"`
	EnrollLimit   limit `config:"enroll_limit"`
	AckLimit      limit `config:"ack_limit"`
}

func defaultserverLimitDefaults() *serverLimitDefaults {
	return &serverLimitDefaults{
		PolicyThrottle: defaultCacheNumCounters,
		MaxConnections: defaultCacheMaxCost,

		CheckinLimit: limit{
			Interval: defaultCheckinInterval,
			Burst:    defaultCheckinBurst,
			Max:      defaultCheckinMax,
			MaxBody:  defaultCheckinMaxBody,
		},
		ArtifactLimit: limit{
			Interval: defaultArtifactInterval,
			Burst:    defaultArtifactBurst,
			Max:      defaultArtifactMax,
			MaxBody:  defaultArtifactMaxBody,
		},
		EnrollLimit: limit{
			Interval: defaultEnrollInterval,
			Burst:    defaultEnrollBurst,
			Max:      defaultEnrollMax,
			MaxBody:  defaultEnrollMaxBody,
		},
		AckLimit: limit{
			Interval: defaultAckInterval,
			Burst:    defaultAckBurst,
			Max:      defaultAckMax,
			MaxBody:  defaultAckMaxBody,
		},
	}
}

var defaults []*envLimits

func init() {
	// Packed Files
	// internal/pkg/config/defaults/1024_limits.yml
	// internal/pkg/config/defaults/2048_limits.yml
	// internal/pkg/config/defaults/4096_limits.yml
	// internal/pkg/config/defaults/8192_limits.yml
	// internal/pkg/config/defaults/base_limits.yml
	// internal/pkg/config/defaults/max_limits.yml
	unpacked := packer.MustUnpack("eJzElluPqkgQx9/3Y8zzZgdaMcdNzkMrgjjpJhqH28uGBkWY5pIR5bLZ775p0DlHQYGTTfZR0v67uupX/6q/X/wo3X1GNn1NPrxXJ472vvfq7vb2iabHV54D47+oH/rp8Y8ipC9/vhCdnozR6kC2sYe2sMAwSU3jsHdCKVV9WCBxPZ6H+GCCAzVAnhCdck4Zvynz2cnV+b0JpjyJNtSJ0EQRlQyJMJv70CO6NDYAPjujdfVd3To53irZPMLUiSzq0OnR1vnEXaIJO+/I7DcWjNEmdsIp58o5VX3II5kvf9YjoUDN0SYhQChVH46u97H4TJAm5Korshihp8j05Mpa4YbSkekRA12+r3gnwlx1hwgv3/jDTow9vIUZWseeIkuFK9PQ1DF3fbvqw1/WRUwXMl3t5ITTI5G+YvXYG5T5LKlzaR0IOx/MUieLPaZhRlpR5/I9u5xNTcObKOLioikFNv/07Vz/GL9/f/n9OUmAG397QlIAOfWWJA6JH6A/SesHJL3/Kkl5B0k5u6/OJI4tHX/aurAnMk1tYz1prU5Y6ynzme8aq9L9ucLz+h5GKN7CvCLUWHG2bh3M0eZLV7mctXWBs4wVMPVsooirlqovskalgoE0bdtoWtzHW9T3zA4mSP+L9zO9rIumMTedPKYJi1DA3g1NY7T9KPrT5D2gaZFh0eNxaWYIJiWrgGWsLq/elKoXe8pydiYyDXbalLOXq7O73BwtFpP+lKZiME16SzaDRjZrSod5U97S98U1Hz98ZH0hbEZJtDoTOe+gdJG16OZtlFb06/jzK06vTU9qoVNpUI/Ffv70jZ+Cx0Sp4kJAt0TlOEBjDJPA1HFsabeeQiItZVV264jL+jy8ZqzSMcH0WjUBlwu+evnAaVdn9EvvREItcGV6JhXFqBg67ZA445tZXTe9ZKvwSFxUfe9Em8QKpcDt8BM2Jd0mAVyTLO9/Jus9Q0ut0V1YbHTXuI9XEfu4uydLGt/tUH0pKjr2pTcHsGpqxZ3HZQTkiTmie1c+FGS04Yj8XvdL95Rj/w9sWQtsQE9dmWvzDrxueNIgctiUaK3wvdcNmm6tmvz9rtSPmFYCi8Zk6+FDoZ0/W7jNUhXXbyaQWEFuB48s8ESbBmSkVS3tlNX5zgV76CC7jvEHwJQ/1ox+g6y/LSzY8jlwNRrWyuycpQsFAfmxa0heG+d+nbmNWem7bPe2XvU60P757d8AAAD//xSynYM=")

	for f, v := range unpacked {
		cfg, err := yaml.NewConfig(v, DefaultOptions...)
		if err != nil {
			panic(errors.Wrap(err, "Cannot read spec from "+f))
		}

		l := defaultEnvLimits()
		if err := cfg.Unpack(&l, DefaultOptions...); err != nil {
			panic(errors.Wrap(err, "Cannot unpack spec from "+f))
		}

		defaults = append(defaults, l)
	}
}

func loadLimits() *envLimits {
	ramSize := int(memory.TotalMemory() / 1024 / 1024)
	return loadLimitsForRam(ramSize)
}

func loadLimitsForRam(currentRAM int) *envLimits {
	for _, l := range defaults {
		// get max possible config for current env
		if l.MinRAM < currentRAM && currentRAM <= l.MaxRAM {
			return l
		}
	}

	return defaultEnvLimits()
}
