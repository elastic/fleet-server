// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by dev-tools/cmd/buildlimits/buildlimits.go - DO NOT EDIT.

package config

import (
	"time"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
	"github.com/elastic/go-ucfg/yaml"
	"github.com/pbnjay/memory"
	"github.com/pkg/errors"
)

const (
	defaultCacheNumCounters = 500000           // 10x times expected count
	defaultCacheMaxCost     = 50 * 1024 * 1024 // 50MiB cache size

	defaultMaxConnections = 0 // no limit
	defaultPolicyThrottle = time.Millisecond * 5

	defaultCheckinInterval = time.Millisecond
	defaultCheckinBurst    = 1000
	defaultCheckinMax      = 0
	defaultCheckinMaxBody  = 1024 * 1024

	defaultArtifactInterval = time.Millisecond * 5
	defaultArtifactBurst    = 25
	defaultArtifactMax      = 50
	defaultArtifactMaxBody  = 0

	defaultEnrollInterval = time.Millisecond * 10
	defaultEnrollBurst    = 100
	defaultEnrollMax      = 50
	defaultEnrollMaxBody  = 1024 * 512

	defaultAckInterval = time.Millisecond * 10
	defaultAckBurst    = 100
	defaultAckMax      = 50
	defaultAckMaxBody  = 1024 * 1024 * 2
)

type envLimits struct {
	MaxRAM int                  `config:"max_ram"`
	Server *serverLimitDefaults `config:"server_limits"`
	Cache  *cacheLimits         `config:"cache_limits"`
}

func defaultEnvLimits() *envLimits {
	return &envLimits{
		MaxRAM: 0,
		Server: defaultserverLimitDefaults(),
		Cache:  defaultCacheLimits(),
	}
}

type cacheLimits struct {
	NumCounters int64 `config:"num_counters"`
	MaxCost     int64 `config:"max_cost"`
}

func defaultCacheLimits() *cacheLimits {
	return &cacheLimits{
		NumCounters: defaultCacheNumCounters,
		MaxCost:     defaultCacheMaxCost,
	}
}

type limit struct {
	Interval time.Duration `config:"interval"`
	Burst    int           `config:"burst"`
	Max      int64         `config:"max"`
	MaxBody  int64         `config:"max_body_byte_size"`
}

type serverLimitDefaults struct {
	PolicyThrottle time.Duration `config:"policy_throttle"`
	MaxConnections int           `config:"max_connections"`

	CheckinLimit  limit `config:"checkin_limit"`
	ArtifactLimit limit `config:"artifact_limit"`
	EnrollLimit   limit `config:"enroll_limit"`
	AckLimit      limit `config:"ack_limit"`
}

func defaultserverLimitDefaults() *serverLimitDefaults {
	return &serverLimitDefaults{
		PolicyThrottle: defaultCacheNumCounters,
		MaxConnections: defaultCacheMaxCost,

		CheckinLimit: limit{
			Interval: defaultCheckinInterval,
			Burst:    defaultCheckinBurst,
			Max:      defaultCheckinMax,
			MaxBody:  defaultCheckinMaxBody,
		},
		ArtifactLimit: limit{
			Interval: defaultArtifactInterval,
			Burst:    defaultArtifactBurst,
			Max:      defaultArtifactMax,
			MaxBody:  defaultArtifactMaxBody,
		},
		EnrollLimit: limit{
			Interval: defaultEnrollInterval,
			Burst:    defaultEnrollBurst,
			Max:      defaultEnrollMax,
			MaxBody:  defaultEnrollMaxBody,
		},
		AckLimit: limit{
			Interval: defaultAckInterval,
			Burst:    defaultAckBurst,
			Max:      defaultAckMax,
			MaxBody:  defaultAckMaxBody,
		},
	}
}

var defaults []*envLimits

func init() {
	// Packed Files
	// internal/pkg/config/defaults/1024_limits.yml
	// internal/pkg/config/defaults/2048_limits.yml
	// internal/pkg/config/defaults/4096_limits.yml
	// internal/pkg/config/defaults/512_limits.yml
	// internal/pkg/config/defaults/8192_limits.yml
	// internal/pkg/config/defaults/max_limits.yml
	unpacked := packer.MustUnpack("eJzclluP4jYUx9/7Mea56sSGoKXSPhgCIVnZCBRye6niZHCSdS5aArlU/e6VuXVmkgkwarVSHzHR3+fyO//jP5+itHj5kXr8Of/Onv0s3UbsOXjZente7J6BBId/8CiJit1vdcKffn+i1nxoD/SQGhnDBqoJymPHIplrjneeBfJggUfTCDGamoUNySGwZMm19WYZoRorqMQoY5oKwpf5OKYDIp3Ovw+wsakxyhvX1qFr61uq8sKz182SZUxbTA5U5fGLOZa8hX4IFuuda2SMGJPCL1/pQXnvWkTyrPHebzJGmst9JHMt8sOz5LPu6hijNp3kNF1zP3VDqmSMWKA5n0eBrTeBODNQeT4rHJuNNGVTYmX2TZtOQj9d524yj4P5OXclY5/XnZVYQUKX01Q/ULW6xqqJHKaIeadaQscqR5qildTG38S5purAT4+1BPj8rejTMkLVWTN0YNGfu3p3jF+ffu2nBkrDLz3UxEha3k+N9AE14LPU4BvUYANdOhF7qhl7kO9tWOXU4tJRt9UJ/aQ3RcxJzdofrF51E53uEdVsNiVeiXvndaDyxLGIdNWNLt/yfaCadZDMd2IyOjosOvquK9qD5My6yKnex4vj0z2ORX78G/kLPYy+3qRnKI1HH9NDFCQTdjc9ww/oqbCyGhLDhyJKH4qKm/UlS7/JRDVLCqvcGfBtoIY1Hawlqm5GmmL20xM/Ss+8o3pau3pHKh/zHdzhO6cuvPEI6UKUa8k1hdXuBpUV7vAK3PIK7Vz3eeyBa5ydeh001m3KV3d5jwxgDzzGrJ4mJHRgyN81ex9YYOvAMTgVEL8eq8KxQ/HfpYAyaWYAswdtJ0bnsbvq7WlixoHKD/R43+yxZXWxsbfggJZho4csp8JKl+6stQgeAqZTc/Me8LsWFe7OuwXfLVC+gHEPKUtlJuP7baYi/4x9Ny3CTFMisuA+f6vnq+I3ke3BOvOTsRSoFRcLrp8WfB0RQbMDi5zy3jEDWJmAduVWHVajgYefOAYqg/YYS+0xZj95WW1KvDDbTx2lZYvH1XGLosSrel46979y/guA6p8H0CfeyP9XgP765e8AAAD//7vBgJ4=")

	for f, v := range unpacked {
		cfg, err := yaml.NewConfig(v, DefaultOptions...)
		if err != nil {
			panic(errors.Wrap(err, "Cannot read spec from "+f))
		}

		l := defaultEnvLimits()
		if err := cfg.Unpack(&l, DefaultOptions...); err != nil {
			panic(errors.Wrap(err, "Cannot unpack spec from "+f))
		}

		defaults = append(defaults, l)
	}
}

func loadLimits() *envLimits {
	ramSize := int(memory.TotalMemory() / 1024 / 1024)
	return loadLimitsForRam(ramSize)
}

func loadLimitsForRam(currentRAM int) *envLimits {
	var lastLimits *envLimits

	for _, l := range defaults {
		// get max possible config for current env
		if currentRAM < l.MaxRAM || (lastLimits != nil && l.MaxRAM > 0 && lastLimits.MaxRAM < l.MaxRAM) {
			continue
		}
		lastLimits = l
	}

	if lastLimits == nil {
		return defaultEnvLimits()
	}
	return lastLimits
}
