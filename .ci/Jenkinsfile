#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO="fleet-server"
    BASE_DIR="src/github.com/elastic/${env.REPO}"
    DOCKER_COMPOSE_VERSION = '1.25.5'
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL='INFO'
    JOB_GCS_BUCKET = 'fleet-ci-artifacts'
    JOB_GCS_CREDENTIALS = 'fleet-ci-gcs-plugin-file-credentials'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Check') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: "Check") {
          cleanup()
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'check',script: 'make check-ci')
            }
          }
        }
      }
    }
    stage('Local') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: "Local") {
          cleanup()
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'local',script: 'make local')
            }
          }
        }
      }
    }
    stage('Unit Test') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: "Unit Test", tab: 'tests') {
          cleanup()
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'test', script: 'make test-unit')
              sh(label: 'test', script: 'make junit-report')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/*.xml")
        }
      }
    }
    stage('Integration Test') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: "Integration Test", tab: 'tests') {
          cleanup()
          dir("${BASE_DIR}"){
            withGoEnv(){
              retryWithSleep(retries: 2, seconds: 5, backoff: true){ sh(label: "Install Docker", script: '.ci/scripts/install-docker-compose.sh') }
              sh(label: 'test', script: 'make test-int')
              sh(label: 'test', script: 'make junit-report')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/*.xml")
        }
      }
    }
    stage('Release Test') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: "Release Test") {
          cleanup()
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'Create release artifacts', script: 'make docker-release')
              uploadPackagesToGoogleBucket(pattern: 'build/distributions/')
              sh(label: 'Check release artifacts', script: 'make test-release')
            }
          }
        }
      }
    }
    // Package registry is decoupled from the unified release, but we provide versioned distribution
    // images with a "snapshot" of the packages available in epr.elastic.co. We decided to trigger the
    // build of this snapshot from a project coupled to the unified release. It is now in fleet-server, but
    // it could be in other projects.
    stage('Release - Package Registry Distribution') {
      options { skipDefaultCheckout() }
      when { expression { isTag() } }
      steps {
        build(job: "release-package-registry-distribution",
              propagate: false,
              wait: false,
              parameters: [
                string(name: 'DOCKER_TAG', value: "${env.TAG_NAME}")
              ]
            )
      }
    }
    stage('Downstream - Package') {
      options { skipDefaultCheckout() }
      when { expression { isBranch() } }
      steps {
        build(job: "Ingest-manager/fleet-server-package-mbp/${env.JOB_BASE_NAME}",
              propagate: false,
              wait: false,
              parameters: [string(name: 'COMMIT', value: "${env.GIT_BASE_COMMIT}")])
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true,
                        analyzeFlakey: !isTag(), jobName: getFlakyJobName(withBranch: (isPR() ? env.CHANGE_TARGET : env.BRANCH_NAME)),
                        githubIssue: isBranch() && currentBuild.currentResult != "SUCCESS",
                        githubLabels: 'Team:Elastic-Agent-Control-Plane')
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}
